stages:
  - test-app
  - build-docker

test:
  stage: test-app

  image: python:3.8.16-slim-buster

  # Change pip's cache directory to be inside the project directory since we can
  # only cache local items.
  variables:
    PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pip"

  cache:
    paths:
      - .cache/pip
      - venv/

  # Pip's cache doesn't store the python packages
  # https://pip.pypa.io/en/stable/reference/pip_install/#caching
  #
  # If you want to also cache the installed packages, you have to install
  # them in a virtualenv and cache it as well.

  before_script:
    - apt-get update && apt-get install -y git && rm -rf /var/lib/apt/lists/*  # Remove it when installing all from PyPI
    - python -V  # Print out python version for debugging
    - pip install virtualenv
    - virtualenv venv
    - source venv/bin/activate

  script:
    - pip install -r requirements-test.txt
    - pip install -e .
    - coverage run -m pytest tests
    - coverage report -m


build:
  stage: build-docker
  only:
    - tags

  variables:
    IMAGE_TAG: ${CI_REGISTRY_IMAGE}:${CI_COMMIT_TAG}
    LATEST_TAG: ${CI_REGISTRY_IMAGE}:latest
    DOCKER_TLS_CERTDIR: ""

  image: docker

  services:
    - docker:dind

  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker info

  script:
    - docker build -t $IMAGE_TAG --no-cache .
    - docker tag $IMAGE_TAG $LATEST_TAG
    - docker push $IMAGE_TAG
    - docker push $LATEST_TAG
    - docker logout $CI_REGISTRY
